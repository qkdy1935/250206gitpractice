로그인페이지 비밀번호

gif - 팀플



1. pm : 팀 프로젝트용 레포지토리 필요

 - 깃허브 접속
 - 팀 전용 레포지토리 만들기 
 - v.s 접속, 문서 열기 pm폴더 

2. pm로컬 컴퓨터에 팀프로잭트의 기준이 될 파일 폴더 및 파일을 생성 > 커밋 & 푸쉬

3. pm : 로컬 컴퓨터에 staging area 존재
터미널 열기
 - git init
 - git remote add origin 레포지토리 주소 (staging area & 레포지토리의 연결)
 - git remote -v (깃 연결 확인)
 - git add . (staging area에 데이터를 담는 명령어)
= > 현재 깃이 설치되어있는 루트 폴더의 모든 데이터를 staging area에 넣겠다는 의미

 - git add 특정파일 : 특정 파일만 staging area 에 넣겠다는 의미
- git add 특정폴더 : 특정 폴더만 staging area 에 넣겠다는 의미

 - git status ( staging area의 현재 상태를 확인


 staging area -> 임시저장소
git commit -> 로컬 컴퓨터에 있는 버전 관리단계 진입

파일 staging area 잘못 올렸을떄 취소 방법
git rm -- cached index.html

파일 보내기 git add .

git commit -m "커밋하고자 하는 이름 넣기"
= commit convention (커밋 메세지 어떻게 어떤 패턴으로 작명할것인가)
(1) 유다시티 커밋 컨벤션
- header body footer
- First Yun(이름) #main(작업페이지)
(2) 깃 이모지
-5개 정도의 팀내 협의된 이모지를 가지고 커밋메세지

현재까지의 커밋 내약을 확인할려면? 
git log
= 커밋했던 히스토리를 볼 수 있음

git push origin master
맥일 경우 main

팀뭔 : pm이 푸쉬한 데이터를 그대로 받아서 작업을 해야 나중에 동일한 히스토리를 기반으로 병합, 분리, 편집을 할 수 있음

1. 팀원 : git clone 레포지토리 주소
=연결

2. git add . 
- 수정 = 모디파이드된 상태를 다시 올림

3. git status 

git restore -- staged index.html
= 파일 취소

Branch : 깃허브 내 하나의 레포지토리에서 관리 할 수 있는 일종의 개별적인 폴더

git commit -m ""

git push origin 
개별 브렌치 만들기
팀원 만의 개별 브렌치 생성 한 후 거기에 대이터를 푸쉬 

git checkout -b team 01
= 브렌치를 만든 명령어

git checkout master
= 마스터 레포지토리로 들어옴

origin = 디폴트 멘인

브렌치 확인
git branch : 현재 프로젝트에서 생성돤 래파스토리에 대한 히스토리를 확인 가능

git reset HEAD^
= 가장 최근 커밋을 제거
= 

git commit -m ""

git add .
git commit -m

git push origin

git revert

git log -했을시 생성된 아이디로 가고싶을때
git revert

;디벨롭 

PM입장에서는 메인 블렌치를 만들떄 디벨롭까지 만드는 것

git checkout -b 디벨롭 브렌치 중간 단계 하나 더만들기

깃허브상의 메모장 = .md
redeme.md

git 

pull request : pm 및 협업관계에 있는 개발자


GUI방식

1. 파일 만들기
2. 터미널 
 - git itin 
 - git remote add origin 주소
 - git remote -v

왼쪽 소스제어 클릭
메세지 작성 -> 커밋 

push 확인 누르기

master에 병합을 요청
= 못하게 안전장치 
세팅즈에 코드앤드 오토매이션 브렌치 룰 셋

네임
main 

https://velog.io/@ldlldl/Github-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%B9%B8%EB%B0%98%EB%B3%B4%EB%93%9C

https://geumjulee.tistory.com/24





