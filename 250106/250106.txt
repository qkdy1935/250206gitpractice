1. 문자선택자

2. 부정선탹자 : 
개발자가 선택한 요소의 반대가 되는 요소들에게만 스타일 속성을 부여할 때 사용할수 있는 선택자

input:not([type="password"]) {
        background: crimson;
    :not = 선택되는 요소들의 반대를 선택

3. 링크선택자 :
 - a태그 안에 링크 여부에 따라서 스타일 속성을 부여해주는 선택자

 a:link::after {
        content: " -" attr(href);
      }

 ----------------------------------------------------------
*라이브라리 & 프레임위크 : 기존문법을 보다 쉽고 빠르게 사용할 수 있도록 하기 위해서 태어난 요소들

 > 라이브러리 (*도서관) : 기존에 존재하는 언어의 문법 체계를 토대로 그 위에 본안들의 커스텀 문법을 얹힌 상태

 > 프레임위크 (*액자) : 완벽하게 본인들만의 운법체계를 구축해서 본인들의 시스템을 개발자들이 별도로 학습
 - Bootstrap
 - 


> F/E :
 - jQuery
 - Reat.js
 - Next.js
> 본인들만의 고유한 문법 체계

jQuery 1.x
jQuery Core 1.12.4: uncompressed, minified

uncompressed : 무압축버전 , 용량큼
minified : 압축버전

<script
  src="https://code.jquery.com/jquery-1.12.4.js"
  integrity="sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU="
  crossorigin="anonymous"></script>

로컬 컴퓨터에 저장
링크 누르고 파일안에 "다른이름으로 저장"하기

jQurey Mobile
JavaScript :
Uncompressed: jquery.mobile-1.4.5.js (useful for debugging)
CSS :
Uncompressed with Default theme: jquery.mobile-1.4.5.css (useful for debugging)

> 링크 누르고 파일안에 "다른이름으로 저장"하기

Mobile은 JS Script 순서 뒤에


라이브러리 스타일
    <div data-role="page">
      <div data-role="header" data-theme="b">

목표설정

문제점 도출 // 문제인식

타겟유저 // 사용자

페르소나

사전리서치

저니맵

오버뷰 (*제품)

스타일 & 컴포넌트 가이드 (*메인 // 서브 // 버튼)

 UI 구현
- 인덱스
- 상세페이지
- 로그인 & 회원가입
- 이벤트페이지


--------------------------------------

*태그
 h / p / a / img / video / audio / table / li / form 



*선택자
 - 전체선택자
 - 태그선택자
 - ID선택자
 - class선택자
 - 속성선택자
 - 후손/자손선택자
 - 동의선택자
 - 반응선택자
 - 상태선택자
 - 일반/형태구조선택자
 - 문자선택자
 - 링크선택자
 - 부정선택자


---------------------------------------------------------

CSS단위
> px : 고정 단위
  - 다양해진 device
  - 애초에 독립적인 device UI 구현 목적 (반응형 아닐 떄 사용가능)
  - 16px

> em : element = 요소
  - 부모요소를 기준으로 배수 계산
  - 부모와 자식이 절대값일때 

> rem : root element = 촤고 뿌리 요소
  - body 요소에 폰트사이즈 값을 적용하고 모든 요소들은 body를 기준으로 배수계산

> % :  width , height 정의하고자 할 때
  - 100% 컨텐츠가 가지고 있는 전체 비율
  - 가변그리드 :  부모의 요소가 줄어들면 줄어들수록 안쪽의 마진값도 비례에 맞춰 줄어드는것
  - 만약 부모 혹은 자식요소 중에 height의 값이 적용된 적이 없다면 그떄는 height : 100 % 는 그냥 자식요소의 기본 높이 값만큼을 의미한다.
- 만약 자식요소중에 height값을 인위적을 적용하게 된다면 height : 100 %는 자식요소의 높이값을 적용한 높이값만큼으로 변경된다.
- 부모요소의 높이값이 

> vw : width : 100%랑 거의 동급
 - viewport width 사용자의 눈에 보여지는 공건에서의 총 너비 면적

> vh : height 사용자가 보고 있는 시점에 총 높이 면적

> max - width  / max - height  : 
  - 일정 이상의 사이즈가 되면 자식요소를 더 이상 사이즈를 키우지 않겠다는 의미

> min - width  / min - height : 최소한
  - 부모요소의 너비값이 줄어들떄 같이 비례해서 줄어들더라도 최소한의 너비값 이상으로 줄어들게 되면 그떄에는 더 이상 줄어들게 하지않고 min - width값을 적용시키겠다는 의미
  - 반응형 웹페이지를 만들지 않을때 사용

*화면 사이즈
https://gs.statcounter.com/screen-resolution-stats/all/asia

--------------------------

CSS속성
> 단위
> 색상
> 가시속성
  - display : 
block : none이라는 속성의 반대의 의미를 가지고 있는 속성
공간을 차지하게 하면서 동시에 사용자 눈에 요소를 보이게 하는 속성
inline : 특정요소가 보여질수 있도록 하는 속성 (너비 높이 적용 X)
inline-block : 너비와 높이적용이 됨
특정요소가 보여질수 있도록 하는 속성
만약 inline-block속성안에 담겨있는 요소들이 하나의 행을 벗어나는 경우에는 block 처럼 독립
만약 inline-block속성안에 담겨있는 요소들이 하나의 행 안에서 소화될 수 있는 경우에는 inline 처럼 한 행을 공유해서 사용

inline VS inline-block 
1) 너비, 높이 값을 적용받을 수 있는가
2) 마진, 패딩 값을 어디까지 적용받을 수 있는가 (인라인- 좌우만 적용)

none : 특정요소를 보이지 않도록 &&공간을 없애는 속성

  - visbility : 공간을 유지한 상태로 보이지 않게 하는 속성

> 박스속성
  - margin : 특정 요소 바깥 공간(*여백)을 얼만큼 부여할 것인가에 대한 스타일 속성
  - padding : 특정 요소 내부 공간(*여백)을 얼만큼 부여할 것인가에 대한 속성

> 테두리 = border 속성


----------------------------------------

> 배경속성 = background

CSS로 이미지 가져오기
background-image: url(" ./ 파일경로") , url ("./ 두번쨰 이미지")

style

body {
        /* CSS통해서 이미지 가져올 경우 이미지 복제 */
        background-color: #e7e7e8;
        background-image: url("./ch_4/BackgroundFront.png"),
          url("./ch_4/BackgroundBack.png");
        background-size: 100%;
        background-position: bottom;
        background-attachment: fixed;
        background-repeat: no-repeat;
        main {
          width: 100%;
          height: 3000px;

축약형 순서 
 background: 컬러 url("이미지경로") 포지션/사이즈 no-repeat fixed

사진 두개 가져오는 축약형 (첫번쨰에 컬러빼기)
 
background: url("./ch_4/BackgroundFront.png") bottom/100% no-repeat  fixed ,
 #e7e7e8 url("./ch_4/BackgroundBack.png") bottom/100% no-repeat fixed;


--------------------------------------------------------
> 색상

가산혼합 : 색을 더 하면 더 할수록 하얀색을 뜀
웹화면 출력 :  RGB기법 -> 색의 3원색
 
#F00 = Red

#0F0 = Green

#00F = Blue

2의 4제곱 2의 4제곱 => 2의 8제곱 => 256
> 바이너리 코드 : 0,1 =>  비트
> 8개의 bit => 1byte = 2의 8제곱
> 웹 색조합 => 1byte

#FF FF FF = 하얀색

> 0 ~ 255

16진수의 가장 큰 숫자 : F
0 ~ 9 , A ~ F

=> Hex 코드
=> 6각형 => Hexagon


-------------------------------------------------

> 폰트속성

font - size
font - famliy
font - style
font - weight
















