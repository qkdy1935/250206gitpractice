* 웹브라우저 대표적으로 3개의 언어 및 스타일 시트만을 인식해왔음

HTML5 : 마크업 언어
 - 제품 서비스를 만드는데 있어서 전체적인 구조를 세팅하는 역할에 그치는 언어 (구조세팅)


CSS3 : 스타일 시트 (* 언어 x )
 - 마크업 언어의 스타일을 생성하고, 적용 시켜주는 보조역할
 - 사용자와의 능동적인 소통을 할 수 있는가?  불가 (비입체적인 단면적 소통)

JavaSript : "프로그레밍" 언어
 - 프로그램을 만들어낼 수 있다 전제
 - 최대한 인간친화적인 모델 형식 채택
 - 명령 // 값 적용 // 찾아와서 // 해당명령 실행
 - 인풋 => process  => 아웃풋
 - F/E = > 대표적인 언어 // 가장 쉬운 언어


TIOBE : 프로그래밍 언어 순위


-----------------------------------------------------------------
script . JS


변수  = variable
변수 = 변할 수 있는 값 = 수
변수= 바구니 // 값을 담을 수 있는 그릇

선언 & 할당(값) => 단계

변수 선언 3가지 방법
 선언하는 방식 => var = (variable) *예약어
 모든 변수, 저마다 고유한 이름 => 변수명 // 식별자
 값을 할당 => "=" 대입 연산자

const(변수선언) num(변수명) =(대입연산자) 1(할당) ;
const num = 1; (num이란 변수 안에 1이 할당)

값이 잘들어갔는지 확인

콘솔로 확인

html 에 scrip연결
<script src="./script.js"></script>

( ) => 매개변수(확인하고자 하는 변수이름)

console.log(num)
라이브 서버 + 개발자도구(ctrl + shift + j)
콘솔 창 안에 할당된 값이 뜸


터미널로 확인
 ( node 설치 시 가능 - node.js )
 - node script.js(파일명)


-----------------------------------------------------

const 사용이유

 - const = cnostart = 상수 = 고정된 값 (변수와 정반대)
 - 변수명 재선언 && 재할당 불가
 - 변수를 선언하는 순간 => 컴퓨터 데이터 (*변수값) => 메모리 영역 할애
=> 메모리가 담길 수 있는 방 생성 = 식별자

const num = 1;
const num = 2;
= 오류 script.js:2 Uncaught SyntaxError: Identifier 'num' has already been declared
= 'num' 같은 변수 재선언 불가

const num = 1;
nom = 2;
= 오류  '2' 재할당 불가

프로그래밍언어는 엄격할수록 안정성이 뛰어나다 => 위험요소가 감소

--------- const = 재선언, 재할당 불가


재할당이 필요한 경우 = let

let str = "Hello World"

let str = "Hello World";
let str = "Me too";
= 오류 같은 변수 재선언 불가

let str = "Hello World"; 
str = "Me too";
= let은 재할당은 가능함

---------- let = 재선언 불가, 제할당 가능

var =지금은 사용안하는 선언문
재선언, 재할당 가능

--------- var = 재선언, 재할당 가능 (안씀)

----------------------------------------------------------

호이스팅 (*Hoisting)
=> 무언가를 끌어올리다

그렇다면 변수 안에는 어떤 값을 넣을 수 있을까?

변수 안에 담을 수 있는 값 => 자료형

 1) 원시타입 = Primitive type

 - number type = 숫자
 - string = 문자열
 - boolean =논리형 (truthy한 값)
  > Template Literal => 변수와 문자열을 동시에 사용하고자 할 때, 굳이 번거롭게 연산자를 사용하지 않을 수 있도록 만들어 놓은 문법

 - undefined = 미정
 > falsy한 값 => 정해지지 않은 값 , 언제가는 들어갈 값

 - null = 유효하지 않은 값 
> 아예 값을 주지 않은 것을 정의하고자 할 떄  "유효하지 않다"라는 값을 가지고 있음

 - symbol = 유일무이한 깂

 2) 참조타입 = Reference type

 - array = 배열 (객체자식)
 - function = 함수
 - object = 객체 

 - regexp = 정규표현식
 - Map = 멥데이터 (이터너블한 데이터 안에 동일한 값이 중복되는 걸 배제 불가
 - Set = 셋데이터
1~45겹쳐진 값이 또 나오면 안될떄 사용 ( 동일한 값이 나오지 않게 할 떄)


---------------------------------------------------------
 1) 원시타입 = Primitive type

 number type = 숫자

 const num = 7; => 숫자


string = 문자열

const str = "7"; => 문자
" " => 문자

 boolean =논리형

const bool = true; => 논리형
const bool02 = false; => 논리형


const userName = "현빈";
const movieTatle = "하얼빈";

const reult = userName + " 배우가 출연한 최근 영화는 " + movieTatle + " 입니다. ";

 > Template Literal => 변수와 문자열을 동시에 사용하고자 할 때, 굳이 번거롭게 연산자를 사용하지 않을 수 있도록 만들어 놓은 문법
변수 => ${ } 
=> const reult = `${userName} 배우가 출연한 최근 영화는 ${movieTatle} 입니다.`;


 symbol = 유일무이한 깂
//   > 복수의 값을 정의할때

const only01 = Symbol();
const only02 = Symbol();

console.log(only01 === only02);

let id = Symbol();

const member365 = {
  name: "jack",
  [id]: "ezen",
};

console.log(member365);


-------------------------------------------------
2) 참조타입 = Reference type

 array = 배열 (객체자식)

=> [ } 대괄호 사용 = 배열의 값을 만드는 선언
 = > 배열은 index 의 값을 갖고있고 

const arr = [1, 2, 3];

console.log(arr[0]);
=> 각각의 아이템 값의 순번을 사용해서 값을 들고 올 수 있음

console.log(`${arr[2]}은 'arr배열의 ${arr.length}번쨰 값입니다.`);
= length =전체배열의 갯수
=> [ ] 선언된 배열의 값을 찾아오는 대괄호

const strArr = ["park", "kim", "lee"];
const boolArr = [true, false];

 - 자바스크립트의 중급자 실력 갖추는데 있어서 요구조건 => iterable 객체 반복문을 누가 더 자유자재로 사용가능한가?

console.log(typeof arr);
 => object = 객체 = 배열은 객체의 자식




 object = 객체
=> { } 중괄호 사용 = 객체

const arr = [1, 2, 3]; => 배열은 1,2,3이 다지만 객체는 1,2,3의 각각을 객체를 정의할수 있음

const obj = {
  fristNumber: 1,
  secoondNumber: 2,
  finalNumber: 3,
};  => 1,2,3의 각각을 이름를 정의할수 있음

=> 객체의 형태는 하나의 키 안에 벨류(key : value) =>한 쌍의 property (부품) = 속성
html을 사용할떄 => a href => attribute (본질) = 속성

const frontendClass = {
  tutor: "Da",
  students: 16,
  major: "language",
};

// 값을 찾아오는 2가지 방법

// 온점표기법
console.log(frontendClass.tutor);

// 대괄호표기법
console.log(frontendClass["students"]);

값을 넣는 방법
frontendClass.attitude = "the best";

console.log(frontendClass);




 - function = 함수 = 기능

// 원래 초창기에 JS함수 구현

// 선언 & 호출

// -선언-
function hello() {
  alert("Hello World!");
}

console.log(hello);

// -호출-
hello();


-----------------------------------
원시 참조


-----------------------------------------------------------

js에서 변수를 선언할 떄 컴퓨터 메모리 공간에서 발생되는 현상 및 프로세스


a변수 선언  -> a라는 방을 만든다
a라는 변수를 담을 공간 필요


변수영역 => (주소 = 1001) , (데이터 이름 = a , 값 : @5001) || ( 주소 = 1002)  (이름 : b , 값 : @5001) ||  (주소 : 1003) , (이름 : obj1 , 값 : @5003) ||  (주소 = 1004) , (데이터 이름 = obj2 , 값 : @5004)

데이터의 영역 => (주소 = 5001) , (데이터 값 = 10) || (주소 = 5002) , (데이터 값 = "ddd") || (주소 = 5003) , (데이터 값 = @7103-@7104) || (주소 = 5004) , (데이터 값 = 15) || (주소 = 5005) , (데이터 값 = 20) ||

객체영역 => (주소 = 7103) , (데이터 이름 = C , 값 : @5005) || (주소 = 7104) , (데이터 이름 = d , 값 : @5002)


------------------------------
참조
원시
전개연산자

변수와 자료형
-------------------------------

JS: 1개의 파일을 독립적인 요소로 인식
TS : 변환하는 과정을 node기반으로 컴파일링 
node = 모듕 ( 번전) 
esm 모듈

하나의 타임스크립트 안에서 있는 변수가 자바에서도 있으면 오류가 남

설정파일  (메뉴얼)
config 
 {
"compilerOptions": {
 "tsrget
}

공통된 변수가 있더라도 팢아오게 하는 메뉴얼 파일


변수라는 것은 원시와 참조로 나눠짐

원시 
숫자 문자 

참조 
배열 객체 함수 정규 셋

원시와 참조
특정 변수의 값을 주소값인지

형변화 
두개의 서로 다른 타입의 형


연산자와 제어문 다음주










































