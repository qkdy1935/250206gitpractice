// 조건문 : 어떤 조건에 부합하냐, 부합하지 않느냐... 실핼시킬 실행명령을 별도로 관리하는 것

// 조건문이 실행되기 위해서는 문법
// 조건식 & 실행문

// if문 : 만약 ~ 라면
// if ~ else문 : 만약 ~ 라면, 하지만 만약 ~가 아니라면
// else lf문 : if 혹은 else외 조건식을 제공하고자 할 떄

// switch문 : 여러가지의 선택자를 제공하고, 해당 선택지 가운데에서 어떤 한 가지를 선택했을 떄, 실행 결과값 도출

// const num01 = 10;
// const num02 = 5;

// 10이 5보다 크다면?  조건이 참이면 실행
// if (10 < 5) {
//   console.log(`${num01}은 ${num02}보다 크다!`);
// }

// const num01 = Number(prompt("첫번쨰 숫자를 입력하세요"));
// const num02 = Number(prompt("두번쨰 숫자를 입력하세요"));
// if (num01 > num02) {
//   console.log(`${num01}은 ${num02}보다 크다!`);
// } else {
//   console.log(`${num02}은 ${num01}보다 크다!`);
// }

const num02 = 10;
const num01 = 5;

if (num01 > num02) console.log(`${num01}은 ${num02}보다 크다!`);
else console.log(`${num02}은 ${num01}보다 크다!`); // => 표현식 { } 필요없음

// 프로그램밍 언어
// 전통적으로 프로그램밍 언어 2가지 부류로 나눠라!
// 실행문 지향언 VS 표현식 지향언어
// 대부분의 프로그램밍 언어 = 실행문 지향언어
// C언어 // 자바 => 객체지향언어 => JS실행문 지향언어
// 함수 선언, 호출 => 로컬컴퓨터 CPU실행 => 실행된 결과를 개발자에게 X
// 표현식 지향언어 => 루비 // 코틀린
// 자바스크립트 => 실행문 & 표현식 모두 사용할수 있는 언어 => 다중 패러다임 언어

// 다중 패러다임(실행문 & 표현식) 특/장점

if (num01 > num02) {
  // { }안에 리턴 숨겨져 있음
  // return이 필요없을떄 => 표현식으로 사용 { } 안써도 됨
  console.log(`${num01}은 ${num02}보다 크다!`);
} else {
  console.log(`${num02}은 ${num01}보다 크다!`);
}
